buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.+"
    }
}

plugins {
    id 'com.github.sherter.google-java-format' version '0.3.2'
}

apply plugin: 'com.jfrog.artifactory'
apply plugin: 'java'
apply plugin: 'maven'

googleJavaFormat {
    options style: 'AOSP'
}

// Force code formatting
compileJava.dependsOn tasks.googleJavaFormat

group 'uk.co.mattburns.pwinty'
version '2.3.1'

sourceCompatibility = JavaVersion.VERSION_1_7
targetCompatibility = JavaVersion.VERSION_1_7

jar {
    manifest {
        attributes 'Implementation-Title': 'pwinty-java-sdk',
                   'Implementation-Version': version
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'joda-time:joda-time:2.7'
    compile 'com.sun.jersey:jersey-core:1.17'
    compile 'com.sun.jersey:jersey-server:1.17'
    compile 'com.sun.jersey:jersey-client:1.17'
    compile 'com.sun.jersey:jersey-servlet:1.17'
    compile 'com.sun.jersey.contribs:jersey-multipart:1.17'

    compile 'com.google.code.gson:gson:2.3'

    testCompile 'junit:junit:4.+'

}

test {
    testLogging {
        events "passed", "skipped", "failed"
    }

    // This prevents SecureRandom from causing very slow tests.
    // Another solution is to change $JAVA_HOME/jre/lib/security/java.security. Replace securerandom.source with securerandom.source=file:/dev/./urandom.
    systemProperty "java.security.egd", "file:/dev/./urandom"
    systemProperty "PWINTY_MERCHANT_ID_SANDBOX", "${PWINTY_MERCHANT_ID_SANDBOX}"
    systemProperty "PWINTY_MERCHANT_KEY_SANDBOX", "${PWINTY_MERCHANT_KEY_SANDBOX}"
    systemProperty "PWINTY_MERCHANT_ID_LIVE", "${PWINTY_MERCHANT_ID_LIVE}"
    systemProperty "PWINTY_MERCHANT_KEY_LIVE", "${PWINTY_MERCHANT_KEY_LIVE}"
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifactoryPublish {
    dependsOn sourcesJar, javadocJar
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar
    archives javadocJar
}

configurations {
    published
}

artifactory {
    contextUrl = "${artifactoryUrl}"
    publish {
        repository {
            repoKey = "libs-release-local"
            username = "${artifactoryUsername}"
            password = "${artifactoryPassword}"
        }
        defaults {
            publishConfigs('archives', 'published')
            publishArtifacts = true
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            publishPom = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            maven = true
        }
    }
}